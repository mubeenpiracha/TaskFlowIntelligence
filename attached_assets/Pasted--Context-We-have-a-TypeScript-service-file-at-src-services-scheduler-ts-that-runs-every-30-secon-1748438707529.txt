# Context
We have a TypeScript service file at `src/services/scheduler.ts` that runs every 30 seconds, pulls unscheduled “tasks” from our DB and creates calendar events via Google Calendar API. Each task has a stored `priority` and a `deadline`. We already have helper functions:
- `getCalendarEvents(userId, window)` → returns all busy slots  
- `findNextAvailableSlot(duration, window)` → returns a free slot or `null`  
- `rescheduleTask(taskId, newSlot)` → treats a task like a new scheduling request  
- `sendSlackNotification(userId, message, options?)` → sends interactive Slack messages  

# Goal
Add a conflict-resolution pass when `findNextAvailableSlot` returns `null` for the incoming task:
1. Fetch all busy slots overlapping the desired window.
2. Partition them into:
   - **System tasks** (we have their `taskId`)
   - **External events** (no `taskId`)
3. For each system task:
   - If its `priority` < incoming task’s `priority`, propose bumping it:
     • Send Slack with buttons: “Replace this task”  
     • If user confirms, call `rescheduleTask(bumpedTaskId, findNextAvailableSlot(bumpedDuration, window))` and then schedule incoming task in the freed slot.
   - Else if its `priority` ≥ incoming task’s and there’s slack between now and its deadline:
     • Call `rescheduleTask(existingTaskId, findNextAvailableSlot(existingDuration, [now, existingDeadline]))` before scheduling the incoming one.
4. For external events:
   - Send Slack offering to “Schedule anyway (overlap)” warning they must manually move it later.
5. If there are lower-priority system tasks that can’t find any free slot even when bumped, automatically push them to their nearest available slot and notify the user of both moves.
6. If after all that there’s still no room, send a Slack summary:  
   “Can’t schedule Task X by Deadline Y due to conflicts with: [list event names & times].”
7. Only reschedule one occurrence for recurring events.  

# Constraints
- Reuse existing helper functions.  
- Maintain current coding style and error-handling patterns.  
- All Slack messages must use our interactive buttons API.  

# Expected Output
Modify `scheduleUnscheduledTasks()` (or a clear subroutine) so new tasks always either get scheduled, get interactive bump options, or generate a summary error.