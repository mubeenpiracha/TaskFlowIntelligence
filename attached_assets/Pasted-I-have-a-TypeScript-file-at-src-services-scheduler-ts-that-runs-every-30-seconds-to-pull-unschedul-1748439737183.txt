I have a TypeScript file at `src/services/scheduler.ts` that runs every 30 seconds to pull unscheduled “tasks” from our DB and create Google Calendar events. I need to integrate robust conflict-resolution logic without changing the existing structure. Please make the following updates:

1. **Import missing helpers**  
   - Add imports for: `parseDuration`, `computeDeadline`, `parseBusySlots`, `findAvailableSlots`, and `scheduleTaskWithEventData` from their modules.

2. **Fetch correct user tasks**  
   - In `partitionBusySlots`, replace the hard-coded `storage.getTasksByUser(1)` with `storage.getTasksByUser(user.id)`.

3. **Fix no-conflict branch**  
   - In `handleSchedulingConflicts`, when `overlappingSlots.length === 0`, return `true` (meaning “no conflicts—schedule normally”) instead of `false`.

4. **Use the freed slot properly**  
   - In `proposeBumpLowerPriorityTask`, after finding `newSlot` for the bumped task, schedule the incoming task in that same `newSlot` rather than re-deriving from old timestamps.

5. **Show real titles for external events**  
   - When building `busySlots`, pull each Google event’s `summary` (or `title`) into the slot object so conflict summaries and Slack messages list actual names.

6. **Handle calendar pagination**  
   - Ensure `getCalendarEvents` gathers all pages (not just the first 100 events) before passing slots to `findAvailableSlots`.

7. **Wire up Slack interactivity**  
   - Replace all `// TODO` stubs in `proposeBumpLowerPriorityTask` and `offerOverlapScheduling` with real calls to our Slack service, using interactive buttons (“Replace this task”, “Schedule anyway”) and hook their callbacks into the rescheduling functions.

8. **Adjust error vs. success signaling**  
   - Confirm that only truly unresolvable conflicts cause a thrown error; after fixing step 3, non-throw should mean either the task was scheduled or a Slack prompt was sent.

9. **Add unit tests**  
   - Write tests for each conflict path:  
     • No conflicts → direct schedule  
     • Bumping lower-priority tasks  
     • Rescheduling higher-priority tasks with slack  
     • External-event overlap branch  
     • Total-failure summary branch

10. **Smoke-test end-to-end**  
   - Deploy to staging, create dummy tasks of varying priority/deadline, and verify calendar moves and Slack prompts behave as expected.

Keep the existing coding style, error handling, and scheduling flow intact. Let me know once it’s refactored and tested!
